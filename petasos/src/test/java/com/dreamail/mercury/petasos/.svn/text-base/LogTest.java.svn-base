package com.dreamail.mercury.petasos;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

import org.junit.Test;

import com.sun.messaging.jmq.util.BASE64Decoder;

public class LogTest {
	@Test
	public void test() throws UnsupportedEncodingException {
		String str = "VGhlIFN1biBpcyB0aGUgbW9zdCBwcm9taW5lbnQgZmVhdHVyZSBpbiBvdXIgc29sYXIgc3lzdGVtLiBJdCBpcyB0aGUgbGFyZ2VzdCBvYmplY3QgYW5kIGNvbnRhaW5zIGFwcHJveGltYXRlbHkgOTglIG9mIHRoZSB0b3RhbCBzb2xhciBzeXN0ZW0gbWFzcy4gT25lIGh1bmRyZWQgYW5kIG5pbmUgRWFydGhzIHdvdWxkIGJlIHJlcXVpcmVkIHRvIGZpdCBhY3Jvc3MgdGhlIFN1bidzIGRpc2ssIGFuZCBpdHMgaW50ZXJpb3IgY291bGQgaG9sZCBvdmVyIDEuMyBtaWxsaW9uIEVhcnRocy4gVGhlIFN1bidzIG91dGVyIHZpc2libGUgbGF5ZXIgaXMgY2FsbGVkIHRoZSBwaG90b3NwaGVyZSBhbmQgaGFzIGEgdGVtcGVyYXR1cmUgb2YgNiwwMDDCsEMgKDExLDAwMMKwRikuIFRoaXMgbGF5ZXIgaGFzIGEgbW90dGxlZCBhcHBlYXJhbmNlIGR1ZSB0byB0aGUgdHVyYnVsZW50IGVydXB0aW9ucyBvZiBlbmVyZ3kgYXQgdGhlIHN1cmZhY2UuIA0KU29sYXIgZW5lcmd5IGlzIGNyZWF0ZWQgZGVlcCB3aXRoaW4gdGhlIGNvcmUgb2YgdGhlIFN1bi4gSXQgaXMgaGVyZSB0aGF0IHRoZSB0ZW1wZXJhdHVyZSAoMTUsMDAwLDAwMMKwIEM7IDI3LDAwMCwwMDDCsCBGKSBhbmQgcHJlc3N1cmUgKDM0MCBiaWxsaW9uIHRpbWVzIEVhcnRoJ3MgYWlyIHByZXNzdXJlIGF0IHNlYSBsZXZlbCkgaXMgc28gaW50ZW5zZSB0aGF0IG51Y2xlYXIgcmVhY3Rpb25zIHRha2UgcGxhY2UuIFRoaXMgcmVhY3Rpb24gY2F1c2VzIGZvdXIgcHJvdG9ucyBvciBoeWRyb2dlbiBudWNsZWkgdG8gZnVzZSB0b2dldGhlciB0byBmb3JtIG9uZSBhbHBoYSBwYXJ0aWNsZSBvciBoZWxpdW0gbnVjbGV1cy4gVGhlIGFscGhhIHBhcnRpY2xlIGlzIGFib3V0IC43IHBlcmNlbnQgbGVzcyBtYXNzaXZlIHRoYW4gdGhlIGZvdXIgcHJvdG9ucy4gVGhlIGRpZmZlcmVuY2UgaW4gbWFzcyBpcyBleHBlbGxlZCBhcyBlbmVyZ3kgYW5kIGlzIGNhcnJpZWQgdG8gdGhlIHN1cmZhY2Ugb2YgdGhlIFN1biwgdGhyb3VnaCBhIHByb2Nlc3Mga25vd24gYXMgY29udmVjdGlvbiwgd2hlcmUgaXQgaXMgcmVsZWFzZWQgYXMgbGlnaHQgYW5kIGhlYXQuIEVuZXJneSBnZW5lcmF0ZWQgaW4gdGhlIFN1bidzIGNvcmUgdGFrZXMgYSBtaWxsaW9uIHllYXJzIHRvIHJlYWNoIGl0cyBzdXJmYWNlLiBFdmVyeSBzZWNvbmQgNzAwIG1pbGxpb24gdG9ucyBvZiBoeWRyb2dlbiBhcmUgY29udmVydGVkIGludG8gaGVsaXVtIGFzaGVzLiBJbiB0aGUgcHJvY2VzcyA1IG1pbGxpb24gdG9ucyBvZiBwdXJlIGVuZXJneSBpcyByZWxlYXNlZDsgdGhlcmVmb3JlLCBhcyB0aW1lIGdvZXMgb24gdGhlIFN1biBpcyBiZWNvbWluZyBsaWdodGVyLiANClRoZSBjaHJvbW9zcGhlcmUgaXMgYWJvdmUgdGhlIHBob3Rvc3BoZXJlLiBTb2xhciBlbmVyZ3kgcGFzc2VzIHRocm91Z2ggdGhpcyByZWdpb24gb24gaXRzIHdheSBvdXQgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBTdW4uIEZhY3VsYWUgYW5kIGZsYXJlcyBhcmlzZSBpbiB0aGUgY2hyb21vc3BoZXJlLiBGYWN1bGFlIGFyZSBicmlnaHQgbHVtaW5vdXMgaHlkcm9nZW4gY2xvdWRzIHdoaWNoIGZvcm0gYWJvdmUgcmVnaW9ucyB3aGVyZSBzdW5zcG90cyBhcmUgYWJvdXQgdG8gZm9ybS4gRmxhcmVzIGFyZSBicmlnaHQgZmlsYW1lbnRzIG9mIGhvdCBnYXMgZW1lcmdpbmcgZnJvbSBzdW5zcG90IHJlZ2lvbnMuIFN1bnNwb3RzIGFyZSBkYXJrIGRlcHJlc3Npb25zIG9uIHRoZSBwaG90b3NwaGVyZSB3aXRoIGEgdHlwaWNhbCB0ZW1wZXJhdHVyZSBvZiA0LDAwMMKwQyAoNywwMDDCsEYpLiANClRoZSBjb3JvbmEgaXMgdGhlIG91dGVyIHBhcnQgb2YgdGhlIFN1bidzIGF0bW9zcGhlcmUuIEl0IGlzIGluIHRoaXMgcmVnaW9uIHRoYXQgcHJvbWluZW5jZXMgYXBwZWFycy4gUHJvbWluZW5jZXMgYXJlIGltbWVuc2UgY2xvdWRzIG9mIGdsb3dpbmcgZ2FzIHRoYXQgZXJ1cHQgZnJvbSB0aGUgdXBwZXIgY2hyb21vc3BoZXJlLiBUaGUgb3V0ZXIgcmVnaW9uIG9mIHRoZSBjb3JvbmEgc3RyZXRjaGVzIGZhciBpbnRvIHNwYWNlIGFuZCBjb25zaXN0cyBvZiBwYXJ0aWNsZXMgdHJhdmVsaW5nIHNsb3dseSBhd2F5IGZyb20gdGhlIFN1bi4gVGhlIGNvcm9uYSBjYW4gb25seSBiZSBzZWVuIGR1cmluZyB0b3RhbCBzb2xhciBlY2xpcHNlcy4gDQpUaGUgU3VuIGFwcGVhcnMgdG8gaGF2ZSBiZWVuIGFjdGl2ZSBmb3IgNC42IGJpbGxpb24geWVhcnMgYW5kIGhhcyBlbm91Z2ggZnVlbCB0byBnbyBvbiBmb3IgYW5vdGhlciBmaXZlIGJpbGxpb24geWVhcnMgb3Igc28uIEF0IHRoZSBlbmQgb2YgaXRzIGxpZmUsIHRoZSBTdW4gd2lsbCBzdGFydCB0byBmdXNlIGhlbGl1bSBpbnRvIGhlYXZpZXIgZWxlbWVudHMgYW5kIGJlZ2luIHRvIHN3ZWxsIHVwLCB1bHRpbWF0ZWx5IGdyb3dpbmcgc28gbGFyZ2UgdGhhdCBpdCB3aWxsIHN3YWxsb3cgdGhlIEVhcnRoLiBBZnRlciBhIGJpbGxpb24geWVhcnMgYXMgYSByZWQgZ2lhbnQsIGl0IHdpbGwgc3VkZGVubHkgY29sbGFwc2UgaW50byBhIHdoaXRlIGR3YXJmIC0tIHRoZSBmaW5hbCBlbmQgcHJvZHVjdCBvZiBhIHN0YXIgbGlrZSBvdXJzLiBJdCBtYXkgdGFrZSBhIHRyaWxsaW9uIHllYXJzIHRvIGNvb2wgb2ZmIGNvbXBsZXRlbHlUaGlzIGltYWdlIHdhcyBhY3F1aXJlZCBmcm9tIE5BU0EncyBTa3lsYWIgc3BhY2Ugc3RhdGlvbiBvbiBEZWNlbWJlciAxOSwgMTk3My4gSXQgc2hvd3Mgb25lIG9mIHRoZSBtb3N0IHNwZWN0YWN1bGFyIHNvbGFyIGZsYXJlcyBldmVyIHJlY29yZGVkLCBwcm9wZWxsZWQgYnkgbWFnbmV0aWMgZm9yY2VzLCBsaWZ0aW5nIG9mZiBmcm9tIHRoZSBTdW4uIEl0IHNwYW5zIG1vcmUgdGhhbiA1ODgsMDAwIGttICgzNjUsMDAwIG1pbGVzKSBvZiB0aGUgc29sYXIgc3VyZmFjZS4gSW4gdGhpcyBwaG90b2dyYXBoLCB0aGUgc29sYXIgcG9sZXMgYXJlIGRpc3Rpbmd1aXNoZWQgYnkgYSByZWxhdGl2ZSBhYnNlbmNlIG9mIHN1cGVyZ3JhbnVsYXRpb24gbmV0d29yaywgYW5kIGEgbXVjaCBkYXJrZXIgdG9uZSB0aGFuIHRoZSBjZW50cmFsIHBvcnRpb25zIG9mIHRoZSBkaXNrLiAoQ291cnRlc3kgTkFTQSkgDQpUaGlzIGltYWdlIG9mIHRoZSBzb2xhciBjb3JvbmEgd2FzIGFjcXVpcmVkIG9uIDIzIERlY2VtYmVyIDE5OTYgYnkgdGhlIExBU0NPIGluc3RydW1lbnQgb24gdGhlIFNPSE8gc3BhY2VjcmFmdC4gSXQgc2hvd3MgdGhlIGlubmVyIHN0cmVhbWVyIGJlbHQgYWxvbmcgdGhlIFN1bidzIGVxdWF0b3IsIHdoZXJlIHRoZSBsb3cgbGF0aXR1ZGUgc29sYXIgd2luZCBvcmlnaW5hdGVzIGFuZCBpcyBhY2NlbGVyYXRlZC4gT3ZlciB0aGUgcG9sYXIgcmVnaW9ucywgb25lIHNlZXMgdGhlIHBvbGFyIHBsdW1lcyBhbGwgdGhlIHdheSBvdXQgdG8gdGhlIGVkZ2Ugb2YgdGhlIGZpZWxkIG9mIHZpZXcuIFRoZSBmaWVsZCBvZg==IHZpZXcgb2YgdGhpcyBjb3JvbmFncmFwaCBlbmNvbXBhc3NlcyA4LjQgbWlsbGlvbiBraWxvbWV0ZXJzICg1LjI1IG1pbGxpb24gbWlsZXMpIG9mIHRoZSBpbm5lciBoZWxpb3NwaGVyZS4gVGhlIGZyYW1lIHdhcyBzZWxlY3RlZCB0byBzaG93IENvbWV0IFNPSE8tNiwgb25lIG9mIHNldmVuIHN1bmdyYXplcnMgZGlzY292ZXJlZCBzbyBmYXIgYnkgTEFTQ08sIGFzIGl0cyBoZWFkIGVudGVycyB0aGUgZXF1YXRvcmlhbCBzb2xhciB3aW5kIHJlZ2lvbi4gSXQgZXZlbnR1YWxseSBwbHVuZ2VkIGludG8gdGhlIFN1bi4gKENvdXJ0ZXN5IEVTQS9OQVNBKSANClRoaXMgc2VxdWVuY2Ugb2YgaW1hZ2VzIG9mIHRoZSB0aGUgU3VuIGluIHVsdHJhdmlvbGV0IGxpZ2h0IHdhcyB0YWtlbiBieSB0aGUgU29sYXIgYW5kIEhlbGlvc3BoZXJpYyBPYnNlcnZhdG9yeSAoU09ITykgc3BhY2VjcmFmdCBvbiBGZWJydWFyeSAxMSwgMTk5NiBmcm9tIGl0cyB1bmlxdWUgdmFudGFnZSBwb2ludCBhdCB0aGUgIkwxIiBncmF2aXR5IG5ldXRyYWwgcG9pbnQgMSBtaWxsaW9uIG1pbGVzIHN1bndhcmQgZnJvbSB0aGUgRWFydGguIEFuICJlcnVwdGl2ZSBwcm9taW5lbmNlIiBvciBibG9iIG9mIDYwLDAwMMKwQyBnYXMsIG92ZXIgODAsMDAwIG1pbGVzIGxvbmcsIHdhcyBlamVjdGVkIGF0IGEgc3BlZWQgb2YgYXQgbGVhc3QgMTUsMDAwIG1pbGVzIHBlciBob3VyLiBUaGUgZ2FzZW91cyBibG9iIGlzIHNob3duIHRvIHRoZSBsZWZ0IGluIGVhY2ggaW1hZ2UuIFRoZXNlIGVydXB0aW9ucyBvY2N1ciB3aGVuIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mIGNvb2wgZGVuc2UgcGxhc21hIG9yIGlvbml6ZWQgZ2FzIGVzY2FwZXMgZnJvbSB0aGUgbm9ybWFsbHkgY2xvc2VkLCBjb25maW5pbmcsIGxvdy1sZXZlbCBtYWduZXRpYyBmaWVsZHMgb2YgdGhlIFN1bidzIGF0bW9zcGhlcmUgdG8gc3RyZWFrIG91dCBpbnRvIHRoZSBpbnRlcnBsYW5ldGFyeSBtZWRpdW0sIG9yIGhlbGlvc3BoZXJlLiBFcnVwdGlvbnMgb2YgdGhpcyBzb3J0IGNhbiBwcm9kdWNlIG1ham9yIGRpc3J1cHRpb25zIGluIHRoZSBuZWFyIEVhcnRoIGVudmlyb25tZW50LCBhZmZlY3RpbmcgY29tbXVuaWNhdGlvbnMsIG5hdmlnYXRpb24gc3lzdGVtcyBhbmQgZXZlbiBwb3dlciBncmlkcy4gKENvdXJ0ZXN5IEVTQS9OQVNBKSANCg==";
		System.out.println(str.length());
		byte[] b = changeByteToBase64(str);
		System.out.println(new String(b, "UTF-8"));
	}

	public byte[] changeByteToBase64(String s) {
		BASE64Decoder decoder = new BASE64Decoder();

		byte[] b = null;
		try {
			b = decoder.decodeBuffer(s);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		return b;
	}

	public static byte[] base64TochangeByte(String s) {
		byte[] b = null;
		return b;
	}
}
